@page "/cusomterdetails/{Id:int}"

@inject NavigationManager NavigationManager
@inject IUnitOfWork Services
@rendermode InteractiveServer

<PageTitle>Customer Details</PageTitle>

@if (Customer == null)
{
    <p class="mt-5"><em>Device not available</em></p>
    <a href="/" role="button" class="btn btn-secondary mt-3">Return back</a>
}

else
{
    <h3 class="mt-3">Customer Details</h3>

    <dl class="row">
        <dt class="col-sm-3">Customer ID</dt>
        <dd class="col-sm-9">@Customer.CustomerID</dd>

        <dt class="col-sm-3">Name</dt>
        <dd class="col-sm-9">@($"{Customer.FirstName} {Customer.LastName}")</dd>

        <dt class="col-sm-3">Title</dt>
        <dd class="col-sm-9">@Customer.Title</dd>

        <dt class="col-sm-3">Company Name</dt>
        <dd class="col-sm-9">@Customer.CompanyName</dd>

        <dt class="col-sm-3">Sales Person</dt>
        <dd class="col-sm-9">@Customer.SalesPerson</dd>

        <dt class="col-sm-3">Email Address</dt>
        <dd class="col-sm-9">@Customer.EmailAddress</dd>

        <dt class="col-sm-3">Phone</dt>
        <dd class="col-sm-9">@Customer.Phone</dd>

        <dt class="col-sm-3">Modified Date</dt>
        <dd class="col-sm-9">@Customer.ModifiedDate.ToShortDateString()</dd>
    </dl>

   <div class="d-flex">
        <button class="btn btn-danger"
                @onclick="@(async () => await DeleteCustomerAsync(Customer.CustomerID))"
                title="Delete Customer">
            <i class="bi bi-x-lg"></i>
        </button>
        <a href="/" role="button" class="btn btn-secondary mt-3">Return back</a>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    public Customer? Customer { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Customer = await Services.CustomerService.GetCustomerAsync(Id);

            if (Customer == null)
            {
                NavigationManager.NavigateTo("/", true);
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching device or items details: {ex.Message}");
            Customer = null;
        }
    }

    private async Task DeleteCustomerAsync(int customerId)
    {
        await Services.CustomerService.DeleteCustomerAsync(customerId);
        StateHasChanged();
        NavigationManager.NavigateTo("/", true);
    }


}