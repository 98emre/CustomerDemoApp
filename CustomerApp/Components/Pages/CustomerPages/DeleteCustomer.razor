@inject NavigationManager NavigationManager
@inject IUnitOfWork Services

@if (Customer != null)
{
    <div class="modal fade" id="@GetModalId(Customer)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button"
                            class="btn btn-danger"
                            data-bs-dismiss="modal"
                            @onclick="@DeleteConfirm">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public Customer Customer { get; set; }

    private string title = string.Empty;

    protected override void OnParametersSet()
    {
        title = $"Delete {Customer?.NameStyle}?";
    }

    public static string GetModalId(Customer customer)
    {
        return $"deleteModal-{customer.CustomerID}";
    }

    private async Task DeleteConfirm()
    {
        await Services.CustomerService.DeleteCustomerAsync(Customer.CustomerID);
        NavigationManager.NavigateTo("/", true);
    }
}